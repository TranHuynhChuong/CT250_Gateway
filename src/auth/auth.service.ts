/* eslint-disable @typescript-eslint/require-await */
import { Injectable, UnauthorizedException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { RedisCacheService } from '../redisCache/redisCache.service'; // Redis ƒë·ªÉ l∆∞u refresh token
import * as bcrypt from 'bcrypt';
import { ConfigService } from '@nestjs/config';

@Injectable()
export class AuthService {
  constructor(
    private jwtService: JwtService,
    private redisCacheService: RedisCacheService,
    private configService: ConfigService
  ) {}

  // ƒêƒÉng nh·∫≠p v√† t·∫°o accessToken + refreshToken
  async login(user: any, userType: 'admin' | 'customer') {
    const payload = { userId: user._id };
    if (userType === 'admin') {
      payload['role'] = user.role;
    }

    const accessToken = this.jwtService.sign(payload, {
      secret: this.configService.get<string>('JWT_SECRET'),
      expiresIn: '1h',
    });

    const refreshToken = this.jwtService.sign(payload, {
      secret: this.configService.get<string>('JWT_REFRESH_SECRET'),
      expiresIn: '7d',
    });

    await this.redisCacheService.set(
      `refresh_token:${user._id}`,
      refreshToken,
      7 * 24 * 60 * 60
    );

    return { accessToken, refreshToken };
  }

  // X√°c th·ª±c Admin
  async validateAdmin(email: string, password: string): Promise<any> {
    // T·∫°m th·ªùi ƒë·ªÉ ki·ªÉm th·ª≠
    const admin = {
      userId: '123',
      email: 'abc',
      password: '123',
      role: 'admin',
    }; // G·ªçi CustomerService l·∫•y th√¥ng tin ƒëƒÉng nh·∫≠p
    //if (!admin) throw new UnauthorizedException('Email kh√¥ng t·ªìn t·∫°i');

    // M√£ h√≥a v√† so s√°nh m·∫≠t kh·∫©u
    //const isMatch = await bcrypt.compare(password, user.password);
    //if (!isMatch) throw new UnauthorizedException('Sai m·∫≠t kh·∫©u');

    // T·∫°m th·ªùi ƒë·ªÉ ki·ªÉm th·ª≠
    const isMatch = password.match(admin.password) ? true : false;
    if (!isMatch) throw new UnauthorizedException('Sai m·∫≠t kh·∫©u');

    return admin; // Tr·∫£ v·ªÅ user n·∫øu x√°c th·ª±c th√†nh c√¥ng
  }

  // X√°c th·ª±c Customer
  async validateCustomer(email: string, password: string): Promise<any> {
    // T·∫°m th·ªùi ƒë·ªÉ ki·ªÉm th·ª≠
    const customer = { userId: '321', email: 'abc', password: '123' }; // G·ªçi AdminService l·∫•y th√¥ng tin ƒëƒÉng nh·∫≠p
    //if (!customer) throw new UnauthorizedException('Email kh√¥ng t·ªìn t·∫°i');

    // M√£ h√≥a v√† so s√°nh m·∫≠t kh·∫©u
    //const isMatch = await bcrypt.compare(password, user.password);
    //if (!isMatch) throw new UnauthorizedException('Sai m·∫≠t kh·∫©u');

    // T·∫°m th·ªùi ƒë·ªÉ ki·ªÉm th·ª≠
    const isMatch = password.match(customer.password) ? true : false;
    if (!isMatch) throw new UnauthorizedException('Sai m·∫≠t kh·∫©u');

    return customer; // Tr·∫£ v·ªÅ user n·∫øu x√°c th·ª±c th√†nh c√¥ng
  }

  // X·ª≠ l√Ω refresh token ƒë·ªÉ c·∫•p l·∫°i access token
  async refreshAccessToken(refreshToken: string) {
    try {
      // üîç Gi·∫£i m√£ refreshToken ƒë·ªÉ l·∫•y userId
      const payload = this.jwtService.verify(refreshToken, {
        secret: process.env.JWT_REFRESH_SECRET,
      });

      const userId = payload.userId;

      // üõ† Ki·ªÉm tra refreshToken trong Redis
      const tokenKey = `refresh_token:${userId}:${refreshToken}`;
      const isValid = await this.redisCacheService.get(tokenKey);
      if (!isValid) {
        throw new UnauthorizedException('Invalid refresh token');
      }

      // üîë T·∫°o accessToken m·ªõi
      const newAccessToken = this.jwtService.sign(
        { userId: payload.userId, role: payload.role },
        {
          secret: process.env.JWT_SECRET,
          expiresIn: '1h',
        }
      );

      return { accessToken: newAccessToken };
    } catch (error) {
      throw new UnauthorizedException('Invalid refresh token');
    }
  }

  async logout(userId: string, accessToken: string, refreshToken: string) {
    const tokenKey = `refresh_token:${userId}:${refreshToken}`;
    await this.redisCacheService.del(tokenKey);

    const accessTokenExpireTime = 60 * 60; // 1 gi·ªù (ho·∫∑c th·ªùi gian h·∫øt h·∫°n c·ªßa token)
    await this.redisCacheService.set(
      `blacklist_token:${accessToken}`,
      'blacklisted',
      accessTokenExpireTime
    );
    return { message: 'Logout successful' };
  }
}
